plugins {
    id 'idea'
	id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.+'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

group = "net.commoble.${modid}"
base { archivesName="${modid}" }
version = "${mod_version}"

repositories {
    mavenLocal()
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets {
	main
	datagen
	examplemod
}

neoForge {
	version = "${neo_version}"
	mods {
		"${modid}" {
			sourceSet(sourceSets.main)
			sourceSet(sourceSets.datagen)
			sourceSet(sourceSets.examplemod)
		}
	}
	runs {
		client {
			client()
		}
		server {
			server()
		}
		gameTestServer {
			type = "gameTestServer"
		}
		clientData {
			clientData()
			programArguments.addAll '--mod', "dungeonfist", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}
		configureEach {
			
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
	examplemodCompileClasspath.extendsFrom(compileClasspath)
	examplemodRuntimeClasspath.extendsFrom(runtimeClasspath)
}

dependencies {
	examplemodImplementation sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = "javadoc"
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
	archiveClassifier = "sources"
	from sourceSets.main.allJava
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId project.archivesBaseName
			artifact jar
			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			name="localMaven"
			url "file:///${project.projectDir}/maven"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
